#!/usr/bin/env bash

# Create a new directory and enter it
cdm() {
  mkdir -p "$1" && cd "$1";
}

# copy file contents to clipboard
eat() {
  if [[ -f "$1" ]]; then
    pbcopy < "$1"
  else
    echo "Give me a real file to eat."
  fi
}

# brew install pandoc
mhc() {
  if [[ -f "$1" ]]; then
    pandoc -f markdown -t html5 --smart "$1" | pbcopy
  else
    echo "That's not a file."
  fi
}

# Change working directory to the top-most Finder window location
cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# brew install entr
# see bin/reload-safari
reload-for() {
  if [[ -z "$1" ]]; then
    echo "Error [return-for]: Specify the type(s) of files to watch."
    return
  fi
  find_func="find $(pwd) -name '*.'$1"
  for ext in "$@"; do
    if [[ "$ext" != "$1" ]]; then
      find_func="$find_func -o -name '*.'$ext";
    fi
  done
  # ¯\_(ツ)_/¯ http://mywiki.wooledge.org/BashFAQ/048
  eval "$find_func | entr reload-safari"
}

# brew install poppler
pdfhead() {
  if [[ -n "$2" ]]; then
    head_opt="$1"
    pdf="$2"
  else
    pdf="$1"
    head_opt="-10"
  fi
  pdftotext "$pdf" - | head "$head_opt"
}

pdftail() {
  if [[ -n "$2" ]]; then
    tail_opt="$1"
    pdf="$2"
  else
    pdf="$1"
    tail_opt="-10"
  fi
  pdftotext "$pdf" - | tail "$tail_opt"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
  local tmpFile="${@%/}.tar";
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  );

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli";
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz";
    else
      cmd="gzip";
    fi;
  fi;

  echo "Compressing .tar using \`${cmd}\`…";
  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm "${tmpFile}";
  echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Create a data URL from a file
dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}
