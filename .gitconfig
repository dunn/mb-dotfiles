[user]
  name = Alex Dunn
  email = dunn.alex@gmail.com

[core]
  excludesfile = /Users/cat/.gitignore

  # Treat spaces before tabs and all kinds of trailing whitespace as
  # an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the
  # beginning of a line
  whitespace = space-before-tab,trailing-space

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[push]
  default = simple

  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[alias]
  m = checkout master
  bare = config --bool core.bare true
  cam = commit -am
  change = log -1 -p --color
  chp = cherry-pick
  cm = commit -m
  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  lag = log --pretty=oneline --color
  ready = diff --cached --color
  st = status
  them = merge -s recursive -X theirs

  # fill out a shallow clone of a repository
  unshallow = fetch --unshallow

  # Print last commit time for file
  last = log -n 1 --pretty=format:%cd --date=local --

  # View abbreviated SHA, description, and history graph of the latest
  # 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || git diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number`
  # revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its
  # submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recursive

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # to use instead of stash
  # see https://codingkilledthecat.wordpress.com/2012/04/27/git-stash-pop-considered-harmful/
  save = !sh -c 'export PREV=$(git symbolic-ref HEAD|cut -d/ -f3-) && git checkout -b "$1" && git commit -am "$1" && git checkout "$PREV"' -

  # check out github pull requests by number
  # https://github.com/thoughtbot/guides/tree/master/protocol/open-source#accepting-a-github-pull-request
  co-pr = !sh -c 'git fetch origin pull/$1/head:pr/$1 && git checkout pr/$1' -

[merge]
  # Include summaries of merged commits in newly created merge commit
  # messages
  log = true
[credential]
	helper = cache --timeout=3600
