#!/usr/bin/env node

const Twit = require('twit')
const async = require('async')

const T = new Twit(require('./secrets.js').twitter)

const args = process.argv
if (args.length < 4) {
  console.error('Error [mutual]: Bad # of arguments')
  console.log("Usage: `mutual darth '<>' duckthecat [--simple]`")
}
else {
  const simple = !!args[5]

  // "darth '<<' duckthecat" — darth's followers that duck follows
  // "darth '<>' duckthecat" — darth's followers that follow duck
  // "darth '>>' duckthecat" — duck's followers that darth follows
  // "darth '><' duckthecat" — people that darth follows that duck follows
  const user1 = (args[3].charAt(0) === '>' ? 'friends' : 'followers')
  const user2 = (args[3].charAt(1) === '<' ? 'friends' : 'followers')

  async.parallel([
    function (callback) {
      const user1opts = { screen_name: args[2], count: 5000 }

      T.get(`${user1}/ids`, user1opts, (err,data,response) => {
        if (err)
          return callback(err)

        if (!simple)
          console.log(`remaining ${user1} requests: ${response.headers['x-rate-limit-remaining']}`)

        let user1Ids = data.ids
        let cursor = data.next_cursor_str

        return async.whilst(
          function () { return cursor !== '0' },
          function (callback) {
            let getUser1Opts = {
              cursor: cursor,
              screen_name: args[2],
              count: 5000
            }
            T.get(`${user1}/ids`, getUser1Opts, (err, data, response) => {
              if (err)
                return callback(err)

              user1Ids = user1Ids.concat(data.ids)
              cursor = data.next_cursor_str
              return callback(null)
            })
          },
          function (err) {
            if (err)
              return callback(err)
            return callback(null, user1Ids)
          })
      })
    },
    function (callback) {
      const user2opts = { screen_name: args[4], count: 5000 }
      T.get(`${user2}/ids`, user2opts, (err,data,response) => {
        if (err)
          return callback(err)

        if (!simple)
          console.log(`remaining ${user2} requests: ${response.headers['x-rate-limit-remaining']}`)

        let user2Ids = data.ids
        let cursor = data.next_cursor_str

        return async.whilst(
          function () { return cursor !== '0' },
          function (callback) {
            let getUser2Opts = {
              cursor: cursor,
              screen_name: args[4],
              count: 5000
            }
            T.get(`${user2}/ids`, getUser2Opts, (err,data,response) => {
              if (err)
                return callback(err)

              user2Ids = user2Ids.concat(data.ids)
              cursor = data.next_cursor_str
              return callback(null)
            })
          },
          function (err) {
            if (err)
              return callback(err)
            return callback(null, user2Ids)
          })
      })
    }
  ], (err, results) =>{
    if (err)
      return console.error(err)

    const all = results[0].concat(results[1])
    // http://stackoverflow.com/questions/840781/easiest-way-to-find-duplicate-values-in-a-javascript-array
    const sorted = all.sort()
    let i = all.length
    const mutuals = []
    while (i--)
      if (sorted[i + 1] === sorted[i])
        mutuals.push(sorted[i])

    if (!simple) {
      const n = mutuals.length
      let output1 = `@${args[2]}`
      output1 += (user1 === 'friends' ? ' is following' : ' is followed by')
      let output2 = `@${args[4]}`
      output2 += (user2 === 'friends' ? ' is following' : ' is followed by')
      console.log(`${output1} ${n} people that ${output2}`)
    }

    return async.whilst(
      function () { return mutuals.length },
      function (callback) {
        let lookupLimit = (mutuals.length < 100 ?
                           mutuals.length : 100 )
        let lookups = ''
        while (lookupLimit--)
          lookups += `,${mutuals.pop()}`

        lookups = lookups.slice(1)

        T.post('users/lookup', { user_id: lookups }, (err,data,res) => {
          if (err) {
            console.error('users/lookup error:')
            return callback(err)
          }
          let k = data.length
          while (k--) {
            if (simple)
              console.log(data[k].screen_name)
            else
              console.log(`${data[k].name} (@${data[k].screen_name})`)
          }
          return callback(null)
        })
      },
      function (err) {
        if (err)
          return console.error(err)
        return true
      }
    )
  })
}
